const TestSuiteGenerator = require('./src/core/test-suite-generator');
const TestRunner = require('./src/core/test-runner');
const fs = require('fs').promises;
const path = require('path');

async function runDay13TestSystem() {
    console.log(' Day 13 - Complete Test System\n');
    console.log('='.repeat(50));
    console.log('\nUsing ABBA agents to test ABBA - Ultimate Dog Fooding!\n');
    
    const startTime = Date.now();
    
    // Step 1: Generate all tests using TestWriter Agent
    console.log('PHASE 1: Test Generation\n');
    const generator = new TestSuiteGenerator();
    await generator.initialize();
    
    const generationResults = await generator.generateAllTests();
    
    console.log('\n✅ Test Generation Complete:');
    console.log(`  Generated: ${generationResults.generated} test files`);
    console.log(`  Failed: ${generationResults.failed}`);
    console.log(`  Unit Tests: ${generationResults.unit.length}`);
    console.log(`  Integration Tests: ${generationResults.integration.length}`);
    console.log(`  Performance Tests: ${generationResults.performance.length}`);
    console.log(`  Load Tests: ${generationResults.load.length}`);
    
    // Step 2: Run all generated tests
    console.log('\n' + '='.repeat(50));
    console.log('\nPHASE 2: Test Execution\n');
    
    const runner = new TestRunner();
    const testResults = await runner.runAllTests();
    
    // Step 3: Generate coverage report
    console.log('\n' + '='.repeat(50));
    console.log('\nPHASE 3: Coverage Analysis\n');
    
    const coverage = await runner.generateCoverageReport();
    console.log(` Code Coverage: ${coverage}%`);
    
    // Step 4: Generate final metrics
    const totalTime = (Date.now() - startTime) / 1000;
    
    console.log('\n' + '='.repeat(50));
    console.log(' DAY 13 COMPLETE METRICS');
    console.log('='.repeat(50));
    
    const metrics = {
        testsGenerated: generationResults.generated,
        testsExecuted: testResults.total,
        testsPassed: testResults.passed,
        testsFailed: testResults.failed,
        successRate: ((testResults.passed / testResults.total) * 100).toFixed(2),
        codeCoverage: coverage,
        totalTime: totalTime.toFixed(2),
        dogFoodingLevel: 'MAXIMUM'
    };
    
    console.log('\n Final Metrics:');
    console.log(`  Tests Generated by AI: ${metrics.testsGenerated}`);
    console.log(`  Tests Executed: ${metrics.testsExecuted}`);
    console.log(`  Success Rate: ${metrics.successRate}%`);
    console.log(`  Code Coverage: ${metrics.codeCoverage}%`);
    console.log(`  Total Time: ${metrics.totalTime} seconds`);
    console.log(`  Dog Fooding: ${metrics.dogFoodingLevel}`);
    
    // Save metrics to file
    await fs.writeFile(
        path.join(__dirname, 'test-metrics.json'),
        JSON.stringify(metrics, null, 2)
    );
    
    // Success message
    if (parseFloat(metrics.successRate) > 80) {
        console.log('\n EXCELLENT! System is production-ready!');
    } else if (parseFloat(metrics.successRate) > 60) {
        console.log('\n✅ Good! System is stable but needs improvements.');
    } else {
        console.log('\n System needs attention before production.');
    }
    
    console.log('\n TestWriter Agent successfully tested the entire ABBA system!');
    console.log('   This is dog fooding at its finest - agents testing agents!\n');
    
    return metrics;
}

// Run if called directly
if (require.main === module) {
    runDay13TestSystem()
        .then(metrics => {
            console.log(' Day 13 Test System completed successfully!');
            process.exit(0);
        })
        .catch(error => {
            console.error('❌ Test system failed:', error);
            process.exit(1);
        });
}

module.exports = runDay13TestSystem;